//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_Game/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Weapon"",
            ""id"": ""3bf19e0d-7490-437a-ad08-667fda1d8614"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""93914574-89b9-4edc-bb2b-90af207021e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""b2253d72-8b27-44d1-beb0-818b348d7019"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""a113dd15-1a88-4539-b0df-7a33ccce6222"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchFireMode"",
                    ""type"": ""Button"",
                    ""id"": ""8c3e1912-0ec1-4d86-a404-c754bc42cac9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""b5568ab7-ebdc-422e-9bb4-ac673ec69a69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""11fc3e56-af94-4384-9ae0-f6e0bfa822c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""917d4a60-8b72-4f4d-b687-7b21ebfe2dc4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f6bee92-f70d-45cd-aa6c-302b58e01cdf"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc6145d2-59a3-428a-b5be-8e1b4745a21c"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchFireMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c35e5b7d-aeff-434c-be83-07f9e6ad083a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ece7765-a567-45c4-94aa-5df886f8c7e1"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59104196-70db-4f1a-9d01-298c2ed6ccce"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Weapon
        m_Weapon = asset.FindActionMap("Weapon", throwIfNotFound: true);
        m_Weapon_Attack = m_Weapon.FindAction("Attack", throwIfNotFound: true);
        m_Weapon_Aim = m_Weapon.FindAction("Aim", throwIfNotFound: true);
        m_Weapon_Reload = m_Weapon.FindAction("Reload", throwIfNotFound: true);
        m_Weapon_SwitchFireMode = m_Weapon.FindAction("SwitchFireMode", throwIfNotFound: true);
        m_Weapon_SwitchToPrimary = m_Weapon.FindAction("SwitchToPrimary", throwIfNotFound: true);
        m_Weapon_SwitchToSecondary = m_Weapon.FindAction("SwitchToSecondary", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Weapon
    private readonly InputActionMap m_Weapon;
    private List<IWeaponActions> m_WeaponActionsCallbackInterfaces = new List<IWeaponActions>();
    private readonly InputAction m_Weapon_Attack;
    private readonly InputAction m_Weapon_Aim;
    private readonly InputAction m_Weapon_Reload;
    private readonly InputAction m_Weapon_SwitchFireMode;
    private readonly InputAction m_Weapon_SwitchToPrimary;
    private readonly InputAction m_Weapon_SwitchToSecondary;
    public struct WeaponActions
    {
        private @PlayerInput m_Wrapper;
        public WeaponActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Weapon_Attack;
        public InputAction @Aim => m_Wrapper.m_Weapon_Aim;
        public InputAction @Reload => m_Wrapper.m_Weapon_Reload;
        public InputAction @SwitchFireMode => m_Wrapper.m_Weapon_SwitchFireMode;
        public InputAction @SwitchToPrimary => m_Wrapper.m_Weapon_SwitchToPrimary;
        public InputAction @SwitchToSecondary => m_Wrapper.m_Weapon_SwitchToSecondary;
        public InputActionMap Get() { return m_Wrapper.m_Weapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @SwitchFireMode.started += instance.OnSwitchFireMode;
            @SwitchFireMode.performed += instance.OnSwitchFireMode;
            @SwitchFireMode.canceled += instance.OnSwitchFireMode;
            @SwitchToPrimary.started += instance.OnSwitchToPrimary;
            @SwitchToPrimary.performed += instance.OnSwitchToPrimary;
            @SwitchToPrimary.canceled += instance.OnSwitchToPrimary;
            @SwitchToSecondary.started += instance.OnSwitchToSecondary;
            @SwitchToSecondary.performed += instance.OnSwitchToSecondary;
            @SwitchToSecondary.canceled += instance.OnSwitchToSecondary;
        }

        private void UnregisterCallbacks(IWeaponActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @SwitchFireMode.started -= instance.OnSwitchFireMode;
            @SwitchFireMode.performed -= instance.OnSwitchFireMode;
            @SwitchFireMode.canceled -= instance.OnSwitchFireMode;
            @SwitchToPrimary.started -= instance.OnSwitchToPrimary;
            @SwitchToPrimary.performed -= instance.OnSwitchToPrimary;
            @SwitchToPrimary.canceled -= instance.OnSwitchToPrimary;
            @SwitchToSecondary.started -= instance.OnSwitchToSecondary;
            @SwitchToSecondary.performed -= instance.OnSwitchToSecondary;
            @SwitchToSecondary.canceled -= instance.OnSwitchToSecondary;
        }

        public void RemoveCallbacks(IWeaponActions instance)
        {
            if (m_Wrapper.m_WeaponActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponActions @Weapon => new WeaponActions(this);
    public interface IWeaponActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnSwitchFireMode(InputAction.CallbackContext context);
        void OnSwitchToPrimary(InputAction.CallbackContext context);
        void OnSwitchToSecondary(InputAction.CallbackContext context);
    }
}
